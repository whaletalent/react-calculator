{"version":3,"sources":["components/CalculatorButton/Button.jsx","main/Calculator.jsx","components/Display/Display.jsx","serviceWorker.js","index.js"],"names":["props","onClick","e","click","label","className","operation","double","triple","initialState","displayValue","clearDisplay","values","current","Calculator","state","this","setState","equals","currentOperation","eval","error","console","log","digit","includes","i","newValue","parseFloat","setOperation","op","addDigit","d","data-testid","value","clearMemory","Component","numberSize","number","n","toString","length","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.4eea9aed.chunk.js","sourcesContent":["import React from 'react'\r\nimport './Button.css'\r\n\r\nexport default props => <button\r\n    onClick={e => props.click && props.click(props.label)}\r\n    className={\r\n        `\r\n    calculator-button\r\n    ${props.operation ? 'operation' : ''}\r\n    ${props.double ? 'double' : ''}\r\n    ${props.triple ? 'triple' : ''}\r\n    `\r\n    }>{props.label}</button>","import React, { Component } from 'react'\r\nimport './Calculator.css'\r\nimport Button from '../components/CalculatorButton/Button'\r\nimport Display from '../components/Display/Display'\r\n\r\nconst initialState = {\r\n    displayValue: '0',\r\n    clearDisplay: false,\r\n    operation: null,\r\n    values: [0, 0],\r\n    current: 0\r\n}\r\n\r\nexport default class Calculator extends Component {\r\n    state = { ...initialState }\r\n    clearMemory() {\r\n        this.setState({ ...initialState })\r\n\r\n    }\r\n    setOperation(operation) {\r\n        if (this.state.current === 0) {\r\n            this.setState({ operation, current: 1, clearDisplay: true })\r\n        } else {\r\n            const equals = operation === '='\r\n            const currentOperation = this.state.operation\r\n            const values = [...this.state.values]\r\n            try {\r\n\r\n                values[0] = eval(`${values[0]} ${currentOperation} ${values[1]}`)\r\n            } catch (error) {\r\n                console.log(error)\r\n                values[0] = this.state.values[0]\r\n            }\r\n            values[1] = 0\r\n            this.setState({\r\n                displayValue: values[0],\r\n                operation: equals ? null : operation,\r\n                current: equals ? 0 : 1,\r\n                clearDisplay: !equals, values\r\n            })\r\n        }\r\n    }\r\n    addDigit(digit) {\r\n        if (digit === '.' && this.state.displayValue.includes('.')) {\r\n            return\r\n        }\r\n        const clearDisplay = this.state.displayValue === '0' || this.state.clearDisplay\r\n        const currentValue = clearDisplay ? '' : this.state.displayValue\r\n        const displayValue = currentValue + digit\r\n        this.setState({ displayValue, clearDisplay: false })\r\n\r\n        if (digit !== '.') {\r\n            const i = this.state.current\r\n            const newValue = parseFloat(displayValue)\r\n            const values = [...this.state.values]\r\n            values[i] = newValue\r\n            this.setState({ values })\r\n        }\r\n    }\r\n    render() {\r\n        const clearMemory = () => this.clearMemory()\r\n        const setOperation = op => this.setOperation(op)\r\n        const addDigit = d => this.addDigit(d)\r\n        return (\r\n            <div className=\"calculator\" data-testid=\"calculator\">\r\n                <Display value={this.state.displayValue} />\r\n                <Button label=\"AC\" triple click={clearMemory} />\r\n                <Button label=\"/\" operation click={setOperation} />\r\n                <Button label=\"7\" click={addDigit} />\r\n                <Button label=\"8\" click={addDigit} />\r\n                <Button label=\"9\" click={addDigit} />\r\n                <Button label=\"*\" operation click={setOperation} />\r\n                <Button label=\"4\" click={addDigit} />\r\n                <Button label=\"5\" click={addDigit} />\r\n                <Button label=\"6\" click={addDigit} />\r\n                <Button label=\"-\" operation click={setOperation} />\r\n                <Button label=\"1\" click={addDigit} />\r\n                <Button label=\"2\" click={addDigit} />\r\n                <Button label=\"3\" click={addDigit} />\r\n                <Button label=\"+\" operation click={setOperation} />\r\n                <Button label=\"0\" double click={addDigit} />\r\n                <Button label=\".\" click={addDigit} />\r\n                <Button label=\"=\" operation click={setOperation} />\r\n            </div>\r\n        )\r\n    }\r\n}","import React from 'react'\r\nimport './display.css'\r\n\r\nconst numberSize = (number) => {\r\n    const n = number.toString()\r\n    if (n.length < 18) {\r\n        return ''\r\n    } else if (n.length >= 18 && n.length < 36) {\r\n        return 'medium'\r\n    } else {\r\n        return 'mini'\r\n    }\r\n}\r\n\r\nexport default props =>\r\n    <div data-testid=\"calculator-display\" className={`calculator-display ${numberSize(props.value)}`}>{props.value}</div>\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Calculator from './main/Calculator';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Calculator />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}